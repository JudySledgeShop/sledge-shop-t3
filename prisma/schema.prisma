// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         Role     @default(USER)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  cart Cart[] @relation("UserToCart")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id                String       @id @default(uuid())
  name              String
  userId            String
  businessAddress   String  @default("")
  billboards        Billboard[]  @relation("StoreToBillboard")
  categories        Category[]   @relation("StoreToCategory")
  products          Product[]    @relation("StoreToProduct")
  sizes             Size[]       @relation("StoreToSize")
  colors            Color[]      @relation("StoreToColor")
  orders            Order[]      @relation("StoreToOrder")
  collections       Collection[] @relation("StoreToCollection")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt


  cart Cart[] @relation("StoreToCart")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  collections Collection[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  attributes  Attribute[]
  products    Product[]   @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
enum ShippingType  {
FLAT_RATE
FREE
LOCAL_PICKUP
VARIABLE 
}
model Product {
  id          String   @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String // Foreign Key to Category
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Float    @default(0.00)
  description String?  @db.VarChar(1000)
  quantity    Int      @default(1)

  isFeatured  Boolean      @default(false)
  isArchived  Boolean      @default(false)
  sizeId      String? // Foreign Key to Size
  size        Size?        @relation(fields: [sizeId], references: [id])
  colorId     String? // Foreign Key to Color
  color       Color?       @relation(fields: [colorId], references: [id])
  images      Image[] // Relation to Image model
  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  variants    Variation[]
  collections Collection[]
  featuredImage String?

  cartItems CartItem[] // Relation to Order model
  weight    Float? @default(0) // in grams
  length    Float? @default(0) // in in
  width Float? @default(0) // in in
  height Float? @default(0) // in in

  shippingType ShippingType @default(FLAT_RATE)
  shippingCost Float? @default(0)

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id              String      @id @default(uuid())
  storeId         String      // Foreign Key to Store
  store           Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems      OrderItem[] // Relation to OrderItem model
  isPaid          Boolean     @default(false)
  name            String      @default("")
  phone           String      @default("")
  address         String      @default("")
  // trackingNumber  String      @default("")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String     @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order      @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product    @relation(fields: [productId], references: [id])
  variantId String? // Foreign Key to Variant
  variant   Variation? @relation(fields: [variantId], references: [id])
  quantity  Int        @default(1)

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Attribute {
  id         String   @id @default(uuid())
  categoryId String // Foreign Key to Product
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  values     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  storeId    String  

  @@index([categoryId])
}

model Variation {
  id         String      @id @default(uuid())
  productId  String // Foreign Key to Product
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  names      String
  values     String
  orderItems OrderItem[] // Relation to Order model
  quantity   Int
  price      Decimal
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  cartItems CartItem[] // Relation to Order model

  @@index([productId])
}

model CartItem {
  id        String     @id @default(uuid())
  cartId    String // Foreign Key to Order
  cart      Cart       @relation(fields: [cartId], references: [id])
  productId String // Foreign Key to Product
  product   Product    @relation(fields: [productId], references: [id])
  variantId String? // Foreign Key to Variant
  variant   Variation? @relation(fields: [variantId], references: [id])
  quantity  Int        @default(1)

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model Cart {
  id        String     @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store      @relation("StoreToCart", fields: [storeId], references: [id])
  userId    String
  user      User       @relation("UserToCart", fields: [userId], references: [id])
  cartItems CartItem[] // Relation to OrderItem model
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
  @@index([userId])
}

model Collection {
  id      String @id @default(uuid())
  name    String
  storeId String // Foreign Key to Store
  store   Store  @relation("StoreToCollection", fields: [storeId], references: [id])

  billboardId String // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])

  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
  BUSINESS_OWNER
}
